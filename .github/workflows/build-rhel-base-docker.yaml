name: Run Docker – RHEL
################################################################################
# TRIGGERS
################################################################################
on:
  # Automatic run when any *.psd1 file is pushed to main
  push:
    branches: [ main ]
    paths:    [ '**/*.psd1' ]

  # Automatic run at 00:00 UTC on the 1st of every month
  schedule:
    - cron: '0 0 1 * *'

  # Manual run
  workflow_dispatch:
    inputs:
      working_directory:
        description: 'Working directory for the script'
        type: string
        default: 'containers/rhel'

      build_context:
        description: 'Docker build context'
        type: string
        default: 'github_workspace'      # special token

      docker_image_name:
        description: 'Image name (repo/name)'
        type: string
        default: 'powershell-helpers/rhel'

      enable_debug_mode:
        description: 'Pass -DebugMode $true to the script'
        type: boolean
        default: false

      registry_url:
        description: 'Container registry URL'
        type: string
        default: 'ghcr.io'

      docker_file_name:
        description: 'Dockerfile name'
        type: string
        default: 'Dockerfile'

      push_docker_image:
        description: 'Push image after build?'
        type: string          # Run-Docker.ps1 expects a *string* “true/false”
        default: 'true'

################################################################################
# JOBS
################################################################################
jobs:
  run-script:
    name: Run Build Script
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: pwsh

    ########################
    # 1.  Resolve defaults #
    ########################
    env:
      WD_INPUT:          ${{ github.event.inputs.working_directory   || 'containers/rhel' }}
      CTX_INPUT:         ${{ github.event.inputs.build_context       || 'github_workspace' }}
      IMGNAME_INPUT:     ${{ github.event.inputs.docker_image_name   || 'powershell-helpers/rhel' }}
      DEBUG_INPUT:       ${{ github.event.inputs.enable_debug_mode   || 'false' }}
      PUSH_INPUT:        ${{ github.event.inputs.push_docker_image   || 'true' }}
      DFNAME_INPUT:      ${{ github.event.inputs.docker_file_name    || 'Dockerfile' }}
      REGURL_INPUT:      ${{ github.event.inputs.registry_url        || 'ghcr.io' }}

    steps:
      - uses: actions/checkout@v3

      ########################
      # 2.  Run the script   #
      ########################
      - name: Build & (optionally) Push Image
        run: |
          #############################################################
          # Turn the env vars into PowerShell variables
          #############################################################
          $wdInput       = $Env:WD_INPUT
          $ctxInput      = $Env:CTX_INPUT
          $imgNameInput  = $Env:IMGNAME_INPUT
          $debugInput    = $Env:DEBUG_INPUT
          $pushInput     = $Env:PUSH_INPUT
          $dfNameInput   = $Env:DFNAME_INPUT
          $regUrlInput   = $Env:REGURL_INPUT

          #############################################################
          # Translate the “github_workspace” token
          #############################################################
          $workingDirectory = if ($wdInput  -eq 'github_workspace') { '${{ github.workspace }}' } else { $wdInput }
          $buildContext     = if ($ctxInput -eq 'github_workspace') { '${{ github.workspace }}' } else { $ctxInput }

          #############################################################
          # Invoke the helper script
          #############################################################
          .\Run-Docker.ps1 `
            -WorkingDirectory $workingDirectory `
            -BuildContext     $buildContext `
            -PushDockerImage  $pushInput `
            -DebugMode        $debugInput `
            -DockerImageName  $imgNameInput `
            -DockerFileName   $dfNameInput `
            -RegistryUrl      $regUrlInput `
            -RegistryUsername '${{ secrets.RegistryUsername }}' `
            -RegistryPassword '${{ secrets.RegistryPassword }}' `
            -ImageOrg         '${{ github.repository_owner }}'
