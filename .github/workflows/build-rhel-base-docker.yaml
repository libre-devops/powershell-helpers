name: 'Run Docker - RHEL'

################################################################################
# TRIGGERS
################################################################################
on:
  # Run automatically when *.psd1 files change on main
  push:
    branches: [ main ]
    paths:   [ '**/*.psd1' ]

  # Run on the 1-st of every month at 00:00 UTC
  schedule:
    - cron: '0 0 1 * *'

  # Manual run - these inputs are OPTIONAL (defaults are provided below)
  workflow_dispatch:
    inputs:
      working_directory:
        description: 'Working directory to hand to the script'
        type:        string
        default:     'containers/rhel'

      build_context:
        description: 'Docker build context'
        type:        string
        default:     'github_workspace'   # special token → ${{ github.workspace }}

      docker_image_name:
        description: 'Docker image name (repo/name)'
        type:        string
        default:     'powershell-helpers/rhel'

      enable_debug_mode:
        description: 'Pass -DebugMode $true to Run-Docker.ps1'
        type:        boolean
        default:     false

      registry_url:
        description: 'Container registry URL'
        type:        string
        default:     'ghcr.io'

      docker_file_name:
        description: 'Dockerfile file name'
        type:        string
        default:     'Dockerfile'

      push_docker_image:
        description: 'Push image after build?'
        type:        string        # keep as string because Run-Docker.ps1 expects it
        default:     'true'

################################################################################
# JOBS
################################################################################
jobs:
  run-script:
    name: 'Run Script'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: pwsh

    steps:
      - uses: actions/checkout@v3

      - name: Build & (optionally) Push Image
        shell: pwsh
        run: |
          ######################################################################
          # 1. Resolve inputs → fall back to safe defaults for non-dispatch runs
          ######################################################################
          $wdInput        = '${{ github.event.inputs.working_directory      || "containers/rhel" }}'
          $ctxInput       = '${{ github.event.inputs.build_context         || "github_workspace" }}'
          $imgNameInput   = '${{ github.event.inputs.docker_image_name     || "powershell-helpers/rhel" }}'
          $debugInput     = '${{ github.event.inputs.enable_debug_mode     || "false" }}'
          $pushInput      = '${{ github.event.inputs.push_docker_image     || "true" }}'
          $dfNameInput    = '${{ github.event.inputs.docker_file_name      || "Dockerfile" }}'
          $regUrlInput    = '${{ github.event.inputs.registry_url          || "ghcr.io" }}'

          ######################################################################
          # 2. Translate special *github_workspace* token → actual workspace
          ######################################################################
          $workingDirectory = if ($wdInput  -eq 'github_workspace') { '${{ github.workspace }}' } else { $wdInput }
          $buildContext     = if ($ctxInput -eq 'github_workspace') { '${{ github.workspace }}' } else { $ctxInput }

          ######################################################################
          # 3. Invoke the helper script
          ######################################################################
          .\Run-Docker.ps1 `
            -WorkingDirectory  $workingDirectory `
            -BuildContext      $buildContext `
            -PushDockerImage   $pushInput `
            -DebugMode         $debugInput `
            -DockerImageName   $imgNameInput `
            -DockerFileName    $dfNameInput `
            -RegistryUrl       $regUrlInput `
            -RegistryUsername  '${{ secrets.RegistryUsername }}' `
            -RegistryPassword  '${{ secrets.RegistryPassword }}' `
            -ImageOrg          '${{ github.repository_owner }}'
